name: Release (tagged)

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install deps
        run: |
          pnpm --version
          pnpm install --frozen-lockfile || pnpm install

      - name: Build (workspace if available)
        run: |
          # Try recursive build for monorepos, fallback to project build
          pnpm -r run build || pnpm run build || true

      - name: Prepare release zips
        shell: bash
        run: |
          set -e
          mkdir -p release-zips

          # Helper to normalize package names (@scope/name -> scope-name)
          normalize() {
            echo "$1" | sed -e 's/@//g' -e 's#/#-#g'
          }

          # If it's a monorepo, try to zip each package directory
          if [ -d "packages" ]; then
            for pkg in packages/*; do
              if [ -f "$pkg/package.json" ]; then
                name=$(node -e "console.log(require('./$pkg/package.json').name || require('path').basename('$pkg'))" 2>/dev/null || basename "$pkg")
                norm=$(normalize "$name")
                # Prefer zipping built output if it exists; otherwise zip the package (excluding heavy dirs)
                if [ -d "$pkg/dist" ]; then
                  (cd "$pkg" && zip -r "../release-zips/${norm}.zip" "dist" -x "node_modules/*" ".git/*" || true)
                else
                  zip -r "release-zips/${norm}.zip" "$pkg" -x "*/node_modules/*" "*/.git/*" || true
                fi
              fi
            done
          fi

          # Always include a repo-wide zip as a fallback
          zip -r "release-zips/repository.zip" . -x ".git/*" "node_modules/*" "packages/*/node_modules/*" || true

          echo "Zipped files:"
          ls -la release-zips || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-zips/*.zip
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
