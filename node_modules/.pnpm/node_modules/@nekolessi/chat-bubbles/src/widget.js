// Chat Bubbles widget - library entry
// Works as an IIFE build (attached to window.ChatBubbles) and can be imported in ESM/CommonJS.
// No console.log (only warn/error), braces on all ifs, and no useless escapes to satisfy ESLint rules.

(function (global) {
  'use strict';

  /**
   * Create a styled bubble node
   * @param {string} text
   * @returns {HTMLElement}
   */
  function createBubble(text) {
    const node = document.createElement('div');
    node.textContent = text || 'chat-bubbles widget ready';
    node.style.fontFamily = 'system-ui, ui-sans-serif, Segoe UI, Roboto, Helvetica, Arial';
    node.style.padding = '8px 12px';
    node.style.borderRadius = '14px';
    node.style.background = 'rgba(255, 105, 180, 0.15)';
    node.style.border = '1px solid rgba(255, 105, 180, 0.4)';
    node.style.display = 'inline-block';
    node.style.color = '#e91e63';
    node.style.backdropFilter = 'blur(2px)';
    node.style.userSelect = 'none';
    return node;
  }

  /**
   * Mount the widget into a container
   * @param {HTMLElement} [container=document.body]
   * @param {{text?: string}} [opts]
   * @returns {{el: HTMLElement, unmount: () => void}}
   */
  function mount(container, opts) {
    const target = container && container.appendChild ? container : document.body;
    const text = opts && typeof opts.text === 'string' ? opts.text : 'chat-bubbles widget ready';
    const el = createBubble(text);
    target.appendChild(el);

    return {
      el,
      unmount() {
        if (el && el.parentNode) {
          el.parentNode.removeChild(el);
        }
      }
    };
  }

  const api = { mount };

  // Attach globally for IIFE consumers (StreamElements etc.)
  if (typeof global !== 'undefined') {
    if (!global.ChatBubbles) {
      global.ChatBubbles = api;
    }
    // eslint-disable-next-line no-console
    console.warn('[chat-bubbles] widget ready');
  }

  // ESM/CJS compatibility (tree-shakable when bundled differently)
  // eslint-disable-next-line no-undef
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = api; // CommonJS
  } else if (typeof define === 'function' && define.amd) {
    // eslint-disable-next-line no-undef
    define(function () { return api; });
  } else {
    // For ESM builds, a named/default export will be replaced by bundlers
  }

})(typeof window !== 'undefined' ? window : globalThis);

export default (typeof window !== 'undefined' ? window.ChatBubbles : undefined);
